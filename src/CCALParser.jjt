/* Section 1 : Options */
options {
    JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
    
    MULTI = true;
    VISITOR = true;
    NODE_DEFAULT_VOID = true;
    NODE_PREFIX = "";
}

/* Section 2 : User Code */

PARSER_BEGIN(CCALParser)
import java.io.*;

    public class CCALParser {
    
        public static SymbolTable symbolTable = new SymbolTable();
        // unless changed elsewhere scope is global
        public static String scope = "global";
        
        public static void main(String [] args) {
        CCALParser parser;

        if(args.length == 0) {
            System.out.println("CCAL Parser: Reading from standard input...");
            parser = new CCALParser(System.in);
        }

        else if(args.length == 1) {
            System.out.println("CCAL Parser: Reading from file " + args[0] + " ...");

            try {
                parser = new CCALParser(new java.io.FileInputStream(args[0]));
            }

            catch(java.io.FileNotFoundException e) {
                System.out.println("CCAL Parser: File " + args[0] + " not found");
                return;
            }
        }

        else {
            System.out.println("CCAL Parser: Usage is one of: ");
            System.out.println("             java CCALParser < inputfile");
            System.out.println("OR");
            System.out.println("             java CCALParser inputfile");
            return;
        }

        try {
            // Print AST
            System.out.println("ABSTRACT SYNTAX TREE");
            SimpleNode root = parser.Prog();
            root.dump("");
            System.out.println();
            
            // Print Symbol Table
            System.out.println("SYMBOL TABLE");            
            symbolTable.printSymbolTable();
            
            System.out.println();
            // Semantic Analysis
            SemanticAnalyser semanticAnalyser = new SemanticAnalyser();
            root.jjtAccept(semanticAnalyser, symbolTable);
            
            // 3 Address Code
           
            //FileWriter fw = new FileWriter();
            String filename = args[0].substring(0, args[0].lastIndexOf(".")) + ".ir";
            try {
                PrintStream out = new PrintStream(new FileOutputStream(filename)); 
                System.setOut(out);
                }
            catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            CodeGenerator codeGenerator = new CodeGenerator();
            root.jjtAccept(codeGenerator, null);
        }

        catch(ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("CCAL Parser: Encountered erros during parse.");
        }
    }
}
PARSER_END(CCALParser)

/* Section 3: Token Definitions */

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : /* ignoring spaces/tabs/newlines */
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

/* COMMENTS */

SKIP :  /* Multi line comments */
{
    "/*" {
        commentNesting++;
    } : IN_COMMENT
}

<IN_COMMENT> SKIP :
{
    "/*" {
        commentNesting++;
    }
|   "*/" {
        commentNesting--;
        if(commentNesting == 0) {
            SwitchTo(DEFAULT);
        }
    }
|   <~[]>
}

SKIP : /* Single line comment */
{
    < "//" (~["\n"])* "\n" >
}

/* reserved words and punctuation */

TOKEN: {
    < VARIABLE: "var" >
    | < CONSTANT: "const" >
    | < RETURN: "return" >
    | < INTEGER: "integer" >
    | < BOOLEAN: "boolean" >
    | < VOID: "void" >
    | < MAIN: "main" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < WHILE: "while" >
    | < BEGIN: "begin" >
    | < END: "end" >
    | < IS: "is" >
    | < SKP: "skip" >
}

/* tokens in the language */

TOKEN : {
  < LBRACKET: "(" >
| < RBRACKET: ")" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < COLON: ":" >
| < ASSIGNMENT: "=" >
| < MINUS: "-" >
| < PLUS: "+" >
| < TILDE: "~" >
| < OR: "||" >
| < AND: "&&" >
| < EQUALS: "==" >
| < NEQUALS: "!=" >
| < GT: ">" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < UNDERSCORE: "_" >
}

/* integers and identifiers */

/* a number can either be 0 or any combination of positive/negative numbers NOT starting with 0 */
/* an identifier must start with a letter and can be a combination of numbers and letters and underscores */

TOKEN: {
    <NUM : "0" | ((<MINUS>)? ["1" - "9"] (<DIGIT>)*) >
|   <#DIGIT: ["0"-"9"] >
|   <ID : <LETTER> (<LETTER> | <DIGIT> | <UNDERSCORE>)* >
|   <#LETTER: ["A"-"Z", "a"-"z"] >
}

/* anything not recognised so far */

TOKEN: {
    <OTHER : ~[] >
}

/* Section 4 : The grammar */

SimpleNode Prog() #Prog : {}
{
    DeclarationList() FunctionList() Main() {return jjtThis;}
}

void DeclarationList() : {}
{
    (Declaration() <SEMICOLON> DeclarationList() | {})
}

void Declaration() : {}
{
    VariableDeclaration()
|   ConstantDeclaration()
}

void VariableDeclaration() #VarDec : {Token t; String id; String type;}
{
    t = <VARIABLE> id = Identifier() <COLON> type = Type()
    {
        jjtThis.value = t.image;
        symbolTable.put(id, type, "var", scope);
    }
}

String Identifier() #Id : {Token t;} 
{
    t = <ID> {jjtThis.value = t.image; return t.image; }
}

void ConstantDeclaration() #ConstDec : {Token t; String id; String type;}
{
    t = <CONSTANT> id = Identifier() <COLON> type = Type() <ASSIGNMENT> Expression()
    {
        jjtThis.value = t.image;
        symbolTable.put(id, type, "const", scope);
    }
}


void FunctionList() : {}
{
    (Function() FunctionList() | {})
}

void Function() #Function : {Token t; String type; String id;}
{
    (type = Type() id = Identifier() {symbolTable.put(id, type, "function", scope);
    
    if(!scope.equals("global")) {
        symbolTable.put(id, type, "function", "global");
        }
     scope = id;} <LBRACKET> ParameterList() <RBRACKET> <IS>
    DeclarationList()
    <BEGIN>
    StatementBlock()
    <RETURN> <LBRACKET> (Expression() | {}) <RBRACKET> <SEMICOLON> #Return
    <END>)
    // we have entered new scope here
    // scope of that function is still whatever scope it was previously
}

void FunctionReturn() : {Token t;}
{
    <RETURN> <LBRACKET> (Expression() | {}) <RBRACKET> <SEMICOLON> 
}

String Type() #Type : {Token t;}
{
    t = <INTEGER> {jjtThis.value = t.image; return t.image; }
|   t = <BOOLEAN>  {jjtThis.value = t.image; return t.image; }
|   t = <VOID>  {jjtThis.value = t.image; return t.image; }
}

void ParameterList()  : {}
{
    NonEmptyParameterList()
|   {}
}

void NonEmptyParameterList() #ParameterList(>1) : {String id; String type;}
{
    id = Identifier() <COLON> type = Type() NonEmptyParameterList2() 
    { symbolTable.put(id, type, "param", scope);}
}

void NonEmptyParameterList2() : {}
{
    <COMMA> NonEmptyParameterList()
|   {}
}

void Main() #Main : {}
{
    {scope = "main";}(<MAIN>
    <BEGIN>
    DeclarationList()
    StatementBlock()
    <END>)
}

void StatementBlock() : {}
{
    (Statement() StatementBlock())
|   {}
}

void Statement() #Statement : {Token t;}
{
    Identifier() Statement2()
|   (<BEGIN> StatementBlock() <END>)
|   (t = <IF> Condition() <BEGIN> StatementBlock() <END> <ELSE> <BEGIN> StatementBlock() <END> {jjtThis.value = t.image;} ) 
|   (t = <WHILE> Condition() <BEGIN> StatementBlock() <END> {jjtThis.value = t.image;} ) 
|   (<SKP> <SEMICOLON>)
}

/* took out the choice conflict here of <ID> */
void Statement2() : {Token t;}
{
    t = <ASSIGNMENT> Expression() <SEMICOLON> {jjtThis.value = t.image; } #Assign
|   t = <LBRACKET> ArgList() <RBRACKET> <SEMICOLON> #FuncAssign
|   {}
}

void Expression(): {}
{
    (Fragment() Fragment2()) 
|   (<LBRACKET> Expression() <RBRACKET> Fragment2()) 
}

void Fragment2() : {}
{
    BinaryOperator() Expression() 
|   {}
}


void BinaryOperator() : {Token t;}
{
    t = <PLUS> {jjtThis.value = t.image;} #PlusOp
|   t = <MINUS> {jjtThis.value = t.image;} #MinusOp
}

void Fragment() : {Token t;}
{
    <MINUS> Identifier() #MinusOp
|   t = <NUM> {jjtThis.value = t.image; } #Num
|   t = <TRUE> {jjtThis.value = t.image; } #BoolOp 
|   t = <FALSE> {jjtThis.value = t.image; } #BoolOp
|   (t = <ID> [<LBRACKET> ArgList() <RBRACKET>] {jjtThis.value = t.image;} )#FuncReturn
}

void Condition() : {}
{
    (<TILDE> Condition() Condition2())
|   LOOKAHEAD(3) <LBRACKET> Condition() <RBRACKET> Condition2()
|   (Expression() ComparisonOp() Condition2())
}

void ComparisonOp() #Comparison: {Token t;}
{
    t = <EQUALS> Expression() {jjtThis.value = t.image;} #EQComp
|   t = <NEQUALS> Expression() {jjtThis.value = t.image;} #NEComp
|   t = <LT> Expression() {jjtThis.value = t.image;} #LTComp
|   t = <LE> Expression() {jjtThis.value = t.image;} #LEComp
|   t = <GT> Expression() {jjtThis.value = t.image;} #GTComp
|   t = <GE> Expression() {jjtThis.value = t.image;} #GEComp
}

void Condition2() : {Token t;}
{
    t = <OR> Condition() {jjtThis.value = t.image;} #ORCondition
|   t = <AND> Condition() {jjtThis.value = t.image;} #ANDCondition
|   {}
}

void ArgList() #ArgList : {}
{
    [NonEmptyArgList()]
}

void NonEmptyArgList() : {}
{
    Identifier() [<COMMA> NonEmptyArgList()]
}
