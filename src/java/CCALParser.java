/* Generated By:JJTree&JavaCC: Do not edit this line. CCALParser.java */
import java.io.*;

    public class CCALParser/*@bgen(jjtree)*/implements CCALParserTreeConstants, CCALParserConstants {/*@bgen(jjtree)*/
  protected static JJTCCALParserState jjtree = new JJTCCALParserState();
        public static SymbolTable symbolTable = new SymbolTable();
        // unless changed elsewhere scope is global
        public static String scope = "global";

        public static void main(String [] args) {
        CCALParser parser;

        if(args.length == 0) {
            System.out.println("CCAL Parser: Reading from standard input...");
            parser = new CCALParser(System.in);
        }

        else if(args.length == 1) {
            System.out.println("CCAL Parser: Reading from file " + args[0] + " ...");

            try {
                parser = new CCALParser(new java.io.FileInputStream(args[0]));
            }

            catch(java.io.FileNotFoundException e) {
                System.out.println("CCAL Parser: File " + args[0] + " not found");
                return;
            }
        }

        else {
            System.out.println("CCAL Parser: Usage is one of: ");
            System.out.println("             java CCALParser < inputfile");
            System.out.println("OR");
            System.out.println("             java CCALParser inputfile");
            return;
        }

        try {
            // Print AST
            System.out.println("ABSTRACT SYNTAX TREE");
            SimpleNode root = parser.Prog();
            root.dump("");
            System.out.println();

            // Print Symbol Table
            System.out.println("SYMBOL TABLE");
            symbolTable.printSymbolTable();

            System.out.println();
            // Semantic Analysis
            SemanticAnalyser semanticAnalyser = new SemanticAnalyser();
            root.jjtAccept(semanticAnalyser, symbolTable);

            // 3 Address Code

            //FileWriter fw = new FileWriter();
            String filename = args[0].substring(0, args[0].lastIndexOf(".")) + ".ir";
            try {
                PrintStream out = new PrintStream(new FileOutputStream(filename));
                System.setOut(out);
                }
            catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            CodeGenerator codeGenerator = new CodeGenerator();
            root.jjtAccept(codeGenerator, null);
        }

        catch(ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("CCAL Parser: Encountered erros during parse.");
        }
    }

/* Section 4 : The grammar */
  static final public SimpleNode Prog() throws ParseException {
                           /*@bgen(jjtree) Prog */
  Prog jjtn000 = new Prog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DeclarationList();
      FunctionList();
      Main();
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                             {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DeclarationList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case CONSTANT:
      Declaration();
      jj_consume_token(SEMICOLON);
      DeclarationList();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void Declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      VariableDeclaration();
      break;
    case CONSTANT:
      ConstantDeclaration();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VariableDeclaration() throws ParseException {
                                      /*@bgen(jjtree) VarDec */
                                      VarDec jjtn000 = new VarDec(JJTVARDEC);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(VARIABLE);
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.value = t.image;
        symbolTable.put(id, type, "var", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String Identifier() throws ParseException {
                           /*@bgen(jjtree) Id */
                           Id jjtn000 = new Id(JJTID);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ConstantDeclaration() throws ParseException {
                                        /*@bgen(jjtree) ConstDec */
                                        ConstDec jjtn000 = new ConstDec(JJTCONSTDEC);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(CONSTANT);
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
      jj_consume_token(ASSIGNMENT);
      Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.value = t.image;
        symbolTable.put(id, type, "const", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void FunctionList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case VOID:
      Function();
      FunctionList();
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

  static final public void Function() throws ParseException {
                             /*@bgen(jjtree) Function */
                             Function jjtn000 = new Function(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t; String type; String id;
    try {
      type = Type();
      id = Identifier();
                                      symbolTable.put(id, type, "function", scope);

    if(!scope.equals("global")) {
        symbolTable.put(id, type, "function", "global");
        }
     scope = id;
      jj_consume_token(LBRACKET);
      ParameterList();
      jj_consume_token(RBRACKET);
      jj_consume_token(IS);
      DeclarationList();
      jj_consume_token(BEGIN);
      StatementBlock();
      jj_consume_token(RETURN);
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LBRACKET:
      case MINUS:
      case NUM:
      case ID:
        Expression();
        break;
      default:
        jj_la1[3] = jj_gen;

      }
      jj_consume_token(RBRACKET);
                                                         Return jjtn001 = new Return(JJTRETURN);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(SEMICOLON);
      } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001, true);
                                                         }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void FunctionReturn() throws ParseException {
                         Token t;
    jj_consume_token(RETURN);
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LBRACKET:
    case MINUS:
    case NUM:
    case ID:
      Expression();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
    jj_consume_token(RBRACKET);
    jj_consume_token(SEMICOLON);
  }

  static final public String Type() throws ParseException {
                       /*@bgen(jjtree) Type */
                       Type jjtn000 = new Type(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image; {if (true) return t.image;}
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; {if (true) return t.image;}
        break;
      case VOID:
        t = jj_consume_token(VOID);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image; {if (true) return t.image;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ParameterList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      NonEmptyParameterList();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  static final public void NonEmptyParameterList() throws ParseException {
                                                   /*@bgen(jjtree) #ParameterList(> 1) */
                                                   ParameterList jjtn000 = new ParameterList(JJTPARAMETERLIST);
                                                   boolean jjtc000 = true;
                                                   jjtree.openNodeScope(jjtn000);String id; String type;
    try {
      id = Identifier();
      jj_consume_token(COLON);
      type = Type();
      NonEmptyParameterList2();
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      jjtc000 = false;
      symbolTable.put(id, type, "param", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  static final public void NonEmptyParameterList2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      NonEmptyParameterList();
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

  static final public void Main() throws ParseException {
                     /*@bgen(jjtree) Main */
  Main jjtn000 = new Main(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
     scope = "main";
      jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      DeclarationList();
      StatementBlock();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void StatementBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BEGIN:
    case SKP:
    case ID:
      Statement();
      StatementBlock();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  static final public void Statement() throws ParseException {
                               /*@bgen(jjtree) Statement */
                               Statement jjtn000 = new Statement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        Identifier();
        Statement2();
        break;
      case BEGIN:
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
        break;
      case IF:
        t = jj_consume_token(IF);
        Condition();
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
        jj_consume_token(ELSE);
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
                                                                                                jjtn000.value = t.image;
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
        Condition();
        jj_consume_token(BEGIN);
        StatementBlock();
        jj_consume_token(END);
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                             jjtn000.value = t.image;
        break;
      case SKP:
        jj_consume_token(SKP);
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* took out the choice conflict here of <ID> */
  static final public void Statement2() throws ParseException {
                     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNMENT:
      t = jj_consume_token(ASSIGNMENT);
      Expression();
      jj_consume_token(SEMICOLON);
                                                Assign jjtn001 = new Assign(JJTASSIGN);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
      try {
                                                jjtree.closeNodeScope(jjtn001, true);
                                                jjtc001 = false;
                                               jjtn001.value = t.image;
      } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001, true);
                                                }
      }
      break;
    case LBRACKET:
      t = jj_consume_token(LBRACKET);
      ArgList();
      jj_consume_token(RBRACKET);
                                          FuncAssign jjtn002 = new FuncAssign(JJTFUNCASSIGN);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(SEMICOLON);
      } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                          }
      }
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS:
    case NUM:
    case ID:
      Fragment();
      Fragment2();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
      Fragment2();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Fragment2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case PLUS:
      BinaryOperator();
      Expression();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  static final public void BinaryOperator() throws ParseException {
                         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
                 PlusOp jjtn001 = new PlusOp(JJTPLUSOP);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
                jjtn001.value = t.image;
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
      }
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                  MinusOp jjtn002 = new MinusOp(JJTMINUSOP);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
      try {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                 jjtn002.value = t.image;
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Fragment() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
              MinusOp jjtn001 = new MinusOp(JJTMINUSOP);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        Identifier();
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      break;
    case NUM:
      t = jj_consume_token(NUM);
                Num jjtn002 = new Num(JJTNUM);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
      try {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
               jjtn002.value = t.image;
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
      }
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                 BoolOp jjtn003 = new BoolOp(JJTBOOLOP);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
      try {
                 jjtree.closeNodeScope(jjtn003, true);
                 jjtc003 = false;
                jjtn003.value = t.image;
      } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003, true);
                 }
      }
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                  BoolOp jjtn004 = new BoolOp(JJTBOOLOP);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
      try {
                  jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                 jjtn004.value = t.image;
      } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
      }
      break;
    case ID:
      FuncReturn jjtn005 = new FuncReturn(JJTFUNCRETURN);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      try {
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          ArgList();
          jj_consume_token(RBRACKET);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
                                                  jjtree.closeNodeScope(jjtn005, true);
                                                  jjtc005 = false;
                                                 jjtn005.value = t.image;
      } catch (Throwable jjte005) {
      if (jjtc005) {
        jjtree.clearNodeScope(jjtn005);
        jjtc005 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte005 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte005;}
      }
      if (jjte005 instanceof ParseException) {
        {if (true) throw (ParseException)jjte005;}
      }
      {if (true) throw (Error)jjte005;}
      } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
      }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
      Condition();
      Condition2();
      break;
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(LBRACKET);
        Condition();
        jj_consume_token(RBRACKET);
        Condition2();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LBRACKET:
        case MINUS:
        case NUM:
        case ID:
          Expression();
          ComparisonOp();
          Condition2();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void ComparisonOp() throws ParseException {
                                  /*@bgen(jjtree) Comparison */
                                  Comparison jjtn000 = new Comparison(JJTCOMPARISON);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        t = jj_consume_token(EQUALS);
        Expression();
                                EQComp jjtn001 = new EQComp(JJTEQCOMP);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
        try {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                               jjtn001.value = t.image;
        } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
        }
        break;
      case NEQUALS:
        t = jj_consume_token(NEQUALS);
        Expression();
                                 NEComp jjtn002 = new NEComp(JJTNECOMP);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
        try {
                                 jjtree.closeNodeScope(jjtn002, true);
                                 jjtc002 = false;
                                jjtn002.value = t.image;
        } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002, true);
                                 }
        }
        break;
      case LT:
        t = jj_consume_token(LT);
        Expression();
                            LTComp jjtn003 = new LTComp(JJTLTCOMP);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
        try {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtc003 = false;
                           jjtn003.value = t.image;
        } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                            }
        }
        break;
      case LE:
        t = jj_consume_token(LE);
        Expression();
                            LEComp jjtn004 = new LEComp(JJTLECOMP);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
        try {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtc004 = false;
                           jjtn004.value = t.image;
        } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                            }
        }
        break;
      case GT:
        t = jj_consume_token(GT);
        Expression();
                            GTComp jjtn005 = new GTComp(JJTGTCOMP);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
        try {
                            jjtree.closeNodeScope(jjtn005, true);
                            jjtc005 = false;
                           jjtn005.value = t.image;
        } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                            }
        }
        break;
      case GE:
        t = jj_consume_token(GE);
        Expression();
                            GEComp jjtn006 = new GEComp(JJTGECOMP);
                            boolean jjtc006 = true;
                            jjtree.openNodeScope(jjtn006);
        try {
                            jjtree.closeNodeScope(jjtn006, true);
                            jjtc006 = false;
                           jjtn006.value = t.image;
        } finally {
                            if (jjtc006) {
                              jjtree.closeNodeScope(jjtn006, true);
                            }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Condition2() throws ParseException {
                     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t = jj_consume_token(OR);
      Condition();
                           ORCondition jjtn001 = new ORCondition(JJTORCONDITION);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                          jjtn001.value = t.image;
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
      }
      break;
    case AND:
      t = jj_consume_token(AND);
      Condition();
                            ANDCondition jjtn002 = new ANDCondition(JJTANDCONDITION);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
      try {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                           jjtn002.value = t.image;
      } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
      }
      break;
    default:
      jj_la1[19] = jj_gen;

    }
  }

  static final public void ArgList() throws ParseException {
                           /*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        NonEmptyArgList();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NonEmptyArgList() throws ParseException {
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      NonEmptyArgList();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(NEQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_2()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_3()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_22() {
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CCALParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x1800,0x1c000,0x8300000,0x8300000,0x1c000,0x0,0x40000000,0x4c40000,0x4c40000,0x8000000,0x8300000,0x0,0x0,0x8000000,0x300000,0x0,0x8300000,0x0,0x0,0x0,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0xa002,0xa002,0x0,0x8000,0x0,0x8000,0x8000,0x1,0xa002,0x6,0x6,0x0,0xa002,0x8,0xa002,0xfc0,0x30,0x8000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CCALParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCALParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CCALParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CCALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CCALParser(CCALParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CCALParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
